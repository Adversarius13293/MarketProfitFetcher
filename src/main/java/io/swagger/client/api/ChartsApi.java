/*
 * Albion Online Data API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.MarketHistoriesResponse;
import io.swagger.client.model.MarketStatChartResponsev2;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChartsApi {
    private ApiClient apiClient;

    public ChartsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChartsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for apiV2StatsChartsItemListFormatGet
     * @param itemList  (required)
     * @param format  (required)
     * @param locations  (optional)
     * @param date  (optional)
     * @param endDate  (optional)
     * @param qualities  (optional)
     * @param timeScale  (optional, default to 6)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV2StatsChartsItemListFormatGetCall(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/stats/Charts/{itemList}.{format}"
            .replaceAll("\\{" + "itemList" + "\\}", apiClient.escapeString(itemList.toString()))
            .replaceAll("\\{" + "format" + "\\}", apiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locations", locations));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (qualities != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("qualities", qualities));
        if (timeScale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("time-scale", timeScale));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV2StatsChartsItemListFormatGetValidateBeforeCall(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'itemList' is set
        if (itemList == null) {
            throw new ApiException("Missing the required parameter 'itemList' when calling apiV2StatsChartsItemListFormatGet(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling apiV2StatsChartsItemListFormatGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV2StatsChartsItemListFormatGetCall(itemList, format, locations, date, endDate, qualities, timeScale, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param itemList  (required)
     * @param format  (required)
     * @param locations  (optional)
     * @param date  (optional)
     * @param endDate  (optional)
     * @param qualities  (optional)
     * @param timeScale  (optional, default to 6)
     * @return List&lt;MarketStatChartResponsev2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MarketStatChartResponsev2> apiV2StatsChartsItemListFormatGet(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale) throws ApiException {
        ApiResponse<List<MarketStatChartResponsev2>> resp = apiV2StatsChartsItemListFormatGetWithHttpInfo(itemList, format, locations, date, endDate, qualities, timeScale);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param itemList  (required)
     * @param format  (required)
     * @param locations  (optional)
     * @param date  (optional)
     * @param endDate  (optional)
     * @param qualities  (optional)
     * @param timeScale  (optional, default to 6)
     * @return ApiResponse&lt;List&lt;MarketStatChartResponsev2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MarketStatChartResponsev2>> apiV2StatsChartsItemListFormatGetWithHttpInfo(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale) throws ApiException {
        com.squareup.okhttp.Call call = apiV2StatsChartsItemListFormatGetValidateBeforeCall(itemList, format, locations, date, endDate, qualities, timeScale, null, null);
        Type localVarReturnType = new TypeToken<List<MarketStatChartResponsev2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param itemList  (required)
     * @param format  (required)
     * @param locations  (optional)
     * @param date  (optional)
     * @param endDate  (optional)
     * @param qualities  (optional)
     * @param timeScale  (optional, default to 6)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV2StatsChartsItemListFormatGetAsync(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale, final ApiCallback<List<MarketStatChartResponsev2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV2StatsChartsItemListFormatGetValidateBeforeCall(itemList, format, locations, date, endDate, qualities, timeScale, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MarketStatChartResponsev2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for apiV2StatsHistoryItemListFormatGet
     * @param itemList  (required)
     * @param format  (required)
     * @param locations  (optional)
     * @param date  (optional)
     * @param endDate  (optional)
     * @param qualities  (optional)
     * @param timeScale  (optional, default to 6)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call apiV2StatsHistoryItemListFormatGetCall(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/api/v2/stats/History/{itemList}.{format}"
            .replaceAll("\\{" + "itemList" + "\\}", apiClient.escapeString(itemList.toString()))
            .replaceAll("\\{" + "format" + "\\}", apiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locations != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("locations", locations));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));
        if (qualities != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("qualities", qualities));
        if (timeScale != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("time-scale", timeScale));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call apiV2StatsHistoryItemListFormatGetValidateBeforeCall(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'itemList' is set
        if (itemList == null) {
            throw new ApiException("Missing the required parameter 'itemList' when calling apiV2StatsHistoryItemListFormatGet(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling apiV2StatsHistoryItemListFormatGet(Async)");
        }
        
        com.squareup.okhttp.Call call = apiV2StatsHistoryItemListFormatGetCall(itemList, format, locations, date, endDate, qualities, timeScale, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param itemList  (required)
     * @param format  (required)
     * @param locations  (optional)
     * @param date  (optional)
     * @param endDate  (optional)
     * @param qualities  (optional)
     * @param timeScale  (optional, default to 6)
     * @return List&lt;MarketHistoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MarketHistoriesResponse> apiV2StatsHistoryItemListFormatGet(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale) throws ApiException {
        ApiResponse<List<MarketHistoriesResponse>> resp = apiV2StatsHistoryItemListFormatGetWithHttpInfo(itemList, format, locations, date, endDate, qualities, timeScale);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param itemList  (required)
     * @param format  (required)
     * @param locations  (optional)
     * @param date  (optional)
     * @param endDate  (optional)
     * @param qualities  (optional)
     * @param timeScale  (optional, default to 6)
     * @return ApiResponse&lt;List&lt;MarketHistoriesResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MarketHistoriesResponse>> apiV2StatsHistoryItemListFormatGetWithHttpInfo(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale) throws ApiException {
        com.squareup.okhttp.Call call = apiV2StatsHistoryItemListFormatGetValidateBeforeCall(itemList, format, locations, date, endDate, qualities, timeScale, null, null);
        Type localVarReturnType = new TypeToken<List<MarketHistoriesResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param itemList  (required)
     * @param format  (required)
     * @param locations  (optional)
     * @param date  (optional)
     * @param endDate  (optional)
     * @param qualities  (optional)
     * @param timeScale  (optional, default to 6)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call apiV2StatsHistoryItemListFormatGetAsync(String itemList, String format, String locations, OffsetDateTime date, OffsetDateTime endDate, String qualities, Integer timeScale, final ApiCallback<List<MarketHistoriesResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = apiV2StatsHistoryItemListFormatGetValidateBeforeCall(itemList, format, locations, date, endDate, qualities, timeScale, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MarketHistoriesResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
